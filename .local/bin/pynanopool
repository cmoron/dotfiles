#!/usr/bin/python
"""
cli tool to monitor nanopool status.
"""

import argparse
import requests

def parse():
    """
    Parse script args.
    """
    parser = argparse.ArgumentParser('Request data from nanopool.org api')

    parser.add_argument('coin',
            help='The coin')
    parser.add_argument('wallet',
            help='The wallet hash')
    parser.add_argument('time',
            help='The time used for average hashrate')

    return parser.parse_args()

def request_data(coin, wallet, time):
    """
    Call nanopool.org API to retrieve mining data.
    """

    url_balance = f'https://api.nanopool.org/v1/{coin}/balance/{wallet}'
    url_hashrate_avg = f'https://api.nanopool.org/v1/{coin}/avghashratelimited/{wallet}/{time}'
    url_hashrate = f'https://api.nanopool.org/v1/{coin}/reportedhashrate/{wallet}'

    balance_response = requests.get(url_balance)
    hashrate_avg_response = requests.get(url_hashrate_avg)
    hashrate_response = requests.get(url_hashrate)

    balance = 'NA'
    hashrate_avg = 'NA'
    hashrate = 'NA'

    # Status is True if request succeed
    if balance_response.json()['status']:
        balance = f"{balance_response.json()['data']:.4f}"

    if hashrate_avg_response.json()['status']:
        hashrate_avg = f"{hashrate_avg_response.json()['data']:.2f}"

    if hashrate_response.json()['status']:
        hashrate = f"{hashrate_response.json()['data']:.2f}"

    return f'{coin}:{balance}|{hashrate_avg}|{hashrate}'

if __name__ == "__main__":
    args = parse()
    output = request_data(args.coin, args.wallet, args.time)
    print(output)
